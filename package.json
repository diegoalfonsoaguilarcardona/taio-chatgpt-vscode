{
  "name": "diegoaacchatgpt",
  "displayName": "ChatGPT for Visual Studio Code: write and improve code using AI",
  "description": "Use ChatGPT and GPT4 right inside the IDE to enhance and automate your coding with AI-powered assistance (unofficial)",
  "version": "1.1.0",
  "publisher": "diegoaac",
  "icon": "resources/extensionIcon.png",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/timkmecl/chatgpt-vscode"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "chatgpt",
    "openai",
    "gpt3",
    "gpt4",
    "copilot",
    "ai",
    "explain",
    "find bugs",
    "explain ",
    "refactor"
  ],
  "activationEvents": [
    "onView:chatgpt.chatView",
    "onCommand:chatgpt.ask",
    "onCommand:chatgpt.explain",
    "onCommand:chatgpt.refactor",
    "onCommand:chatgpt.optimize",
    "onCommand:chatgpt.findProblems",
    "onCommand:chatgpt.documentation",
    "onCommand:chatgpt.useSelectionAsChat",
    "onCommand:chatgpt.appendSelectionAsChat",
    "onCommand:chatgpt.addFileReferenceToChat"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "chatgpt.ask",
        "title": "Ask ChatGPT"
      },
      {
        "command": "chatgpt.explain",
        "title": "ChatGPT: Explain selection"
      },
      {
        "command": "chatgpt.refactor",
        "title": "ChatGPT: Refactor selection"
      },
      {
        "command": "chatgpt.findProblems",
        "title": "ChatGPT: Find problems"
      },
      {
        "command": "chatgpt.optimize",
        "title": "ChatGPT: Optimize selection"
      },
      {
        "command": "chatgpt.documentation",
        "title": "ChatGPT: Write documentation"
      },
      {
        "command": "chatgpt.resetConversation",
        "title": "Reset ChatGPT conversation"
      },
      {
        "command": "chatgpt.pasteChat",
        "title": "Paste ChatGPT chat"
      },
      {
        "command": "chatgpt.useSelectionAsChat",
        "title": "Use selection as ChatGPT conversation"
      },
      {
        "command": "chatgpt.appendSelectionAsChat",
        "title": "Append selection to ChatGPT conversation"
      },      
      {
        "command": "chatgpt.tryAgain",
        "title": "Retry ChatGPT request"
      },
      {
        "command": "chatgpt.addImageToChat",
        "title": "Add Image to ChatGPT"
      },
      {
        "command": "chatgpt.addFileToChat",
        "title": "Add File Content to ChatGPT"
      },
      {
        "command": "chatgpt.addFileReferenceToChat",
        "title": "Add File Reference to ChatGPT"        
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "chatgpt.ask",
          "when": "editorTextFocus",
          "group": "chatgpt-menu-group@1"
        },
        {
          "command": "chatgpt.explain",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@2"
        },
        {
          "command": "chatgpt.refactor",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@3"
        },
        {
          "command": "chatgpt.findProblems",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@4"
        },
        {
          "command": "chatgpt.optimize",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@5"
        },
        {
          "command": "chatgpt.documentation",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@6"
        },
        {
          "command": "chatgpt.useSelectionAsChat",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@7"
        },
        {
          "command": "chatgpt.appendSelectionAsChat",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@8"
        }
      ],
      "commandPalette": [
        {
          "command": "chatgpt.ask"
        },
        {
          "command": "chatgpt.explain",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.refactor",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.findProblems",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.optimize",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.documentation",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.resetConversation"
        },
        {
          "command": "chatgpt.pasteChat"
        },
        {
          "command": "chatgpt.useSelectionAsChat",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.appendSelectionAsChat",
          "when": "editorHasSelection"          
        }
      ],
      "explorer/context": [
        {
          "command": "chatgpt.addImageToChat",
          "when": "resourceExtname == .png || resourceExtname == .jpg || resourceExtname == .jpeg || resourceExtname == .gif",
          "group": "navigation"
        },
        {
          "command": "chatgpt.addFileReferenceToChat",
          "when": "resourceLangId =~ /^((javascript)|(typescript)|(python)|(json)|(markdown)|(plaintext)|(cpp)|(c)|(java)|(xml)|(html)|(css)|(shellscript)|(yaml)|(toml)|(ini)|(go)|(ruby)|(php)|(rust)|(csharp)|(plaintext))$/",
          "group": "navigation"
        },
        {
          "command": "chatgpt.addFileToChat",
          "when": "resourceLangId =~ /^((javascript)|(typescript)|(python)|(json)|(markdown)|(plaintext)|(cpp)|(c)|(java)|(xml)|(html)|(css)|(shellscript)|(yaml)|(toml)|(ini)|(go)|(ruby)|(php)|(rust)|(csharp)|(plaintext))$/",
          "group": "navigation"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "chatgpt",
          "title": "ChatGPT",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "chatgpt": [
        {
          "type": "webview",
          "id": "chatgpt.chatView",
          "name": "ChatGPT"
        }
      ]
    },
    "configuration": {
      "title": "chatGPT",
      "type": "object",
      "properties": {
        "chatgpt.providers": {
          "type": "array",
          "description": "List of AI providers with their configurations.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the provider (e.g., OpenAI, CustomAPI)."
              },
              "apiKey": {
                "type": "string",
                "description": "API key for the provider."
              },
              "apiUrl": {
                "type": "string",
                "description": "API URL for the provider."
              },
              "chatCompletionsUrl": {
                "type": "string",
                "description": "Chat Completions API base URL for this provider (optional; overrides apiUrl when using chat completions)."
              },
              "responsesUrl": {
                "type": "string",
                "description": "Responses API base URL for this provider (optional; used when a model selects the Responses API)."
              },              
              "models": {
                "type": "array",
                "description": "List of models offered by this provider.",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the model (e.g., gpt-3.5-turbo)."
                    },
                    "model_name": {
                      "type": "string",
                      "description": "The actual model identifier to send to the provider (e.g., gpt-4o, o4-mini)."
                    },
                    "api": {
                      "type": "string",
                      "enum": ["chatCompletions", "responses"],
                      "description": "Which API to use for this model."
                    },
                    "tools": {
                      "type": "array",
                      "description": "Optional tools configuration for providers that support tools (e.g., OpenAI Responses).",
                      "items": {
                        "type": "object",
                        "description": "Tool definition object; schema is provider-specific."
                      }
                    },                    
                    "options": {
                      "type": "object",
                      "description": "Options for the model.",
                      "additionalProperties": {
                        "type": "any",
                        "description": "Custom option key-value pairs for the model."
                      }
                    }
                  },
                  "required": ["name"]
                }
              }
            },
            "required": ["name", "apiKey", "apiUrl", "models"]
          },
          "order": 1
        },
        "chatgpt.prompts" : {
          "type":"array",
          "description": "List of possible prompts to use",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the prompt (e.g., ChainOfThougt, Simple Engenier)."
              },
              "prompt": {
                "type": "string",
                "description": "The prompt it self"
              }
            },
            "required": ["name", "prompt"]
          },
          "order": 2
        },
        "chatgpt.pasteOnClick": {
          "type": "boolean",
          "default": true,
          "description": "Paste the code from a codeblock inside the response into the editor when you click on it",
          "order": 3
        },
        "chatgpt.promptPrefix.explain": {
          "type": "string",
          "default": "Explain what this code does: ",
          "description": "The prompt prefix used for explaining the selected code",
          "order": 4
        },
        "chatgpt.promptPrefix.refactor": {
          "type": "string",
          "default": "Refactor this code and explain what's changed: ",
          "description": "The prompt prefix used for refactoring the selected code",
          "order": 5
        },
        "chatgpt.promptPrefix.findProblems": {
          "type": "string",
          "default": "Find problems with the following code, fix them and explain what was wrong (Do not change anything else, if there are no problems say so): ",
          "description": "The prompt prefix used for finding problems in the selected code",
          "order": 6
        },
        "chatgpt.promptPrefix.documentation": {
          "type": "string",
          "default": "Write documentation for the following code: ",
          "description": "The prompt prefix used for writing documentation for the selected code",
          "order": 7
        },
        "chatgpt.promptPrefix.optimize": {
          "type": "string",
          "default": "Optimize the following code if there is anything to improve, if not say so: ",
          "description": "The prompt prefix used for optimizing the selected code",
          "order": 8
        },
        "chatgpt.keepConversation": {
          "type": "boolean",
          "default": true,
          "description": "Keep the conversation going by using the same conversation ID for all requests (allows follow-up questions)",
          "order": 9
        },
        "chatgpt.timeoutLength": {
          "type": "number",
          "default": "120",
          "description": "How long should the request wait for a response before timing out (in seconds)",
          "order": 10
        },
        "chatgpt.selectedInsideCodeblock": {
          "type": "boolean",
          "default": true,
          "description": "Append selected code as a codeblock (```...code...```) instead of plain text",
          "order": 11
        },
        "chatgpt.codeblockWithLanguageId": {
          "type": "boolean",
          "default": true,
          "description": "Append language id of the selected code to the codeblock (```language...code...```)",
          "order": 12
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "update-package-lock": "npm install --package-lock-only"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/js-yaml": "^4.0.9",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.73.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "ts-loader": "^9.4.1",
    "typescript": "^4.9.3",
    "webpack": "^5.75.0",
    "webpack-cli": "^5.0.0"
  },
  "dependencies": {
    "@types/node-fetch": "^2.6.11",
    "js-tiktoken": "^1.0.10",
    "js-yaml": "^4.1.0",
    "node-fetch": "^3.3.2",
    "openai": "^6.0.0"
  }
}
